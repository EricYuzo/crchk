#! /usr/bin/env bash

error() {
    echo "$PROGRAM: $@" 1>&2
    usage
    exit 1
}

check_dependencies() {
    command -v crc32 > /dev/null
    if [ $? -ne 0 ] ; then
        error "program crc32 missing."
    fi
}

usage() {
    echo "Usage: $PROGRAM [OPTION]... FILE..."
    echo "Try '$PROGRAM --help' for more information."
}

showhelp() {
    echo "Usage: $PROGRAM [OPTION]... FILE..."
    echo
    echo "Check FILE integrity based on CRC-32."
    echo "Directories are skipped, by default. You can use -r option to handle directories recursively."
    echo
    echo "Available options:"
    echo "  -h, --help         display this help and exit"
    echo "  -r, --recursive    recursively look for files inside directories"
    echo "  -v, --version      display version information and exit"
}

showversion() {
    echo "$PROGRAM $version"
}

extract_crc() {
    regex='^.*[[({]\([0-9A-Fa-f]\{8\}\)[])}]\(\.[^.]\+\)\?$'
    echo "$1" | grep -q "$regex"
    if [ $? -eq 0 ] ; then
        echo "$1" | tr '[A-F]' '[a-f]' | sed "s/${regex}/\1/"
    else
        echo "$not_found"
    fi
}

compare() {
    detected_crc=$1
    calculated_crc=$2
    if [ "$detected_crc" = "$calculated_crc" ] ; then
        echo "ok"
    elif [ "$detected_crc" = "$not_found" ] ; then
        echo "$not_found"
    else
        echo "corrupted"
    fi
}

verify() {
    file_name="$@"
    detected_crc=`extract_crc "$file_name"`
    calculated_crc=`crc32 "$file_name"`
    status=`compare $detected_crc $calculated_crc`
    echo "$file_name    $detected_crc    $calculated_crc    $status"
}

process() {
    for f in "$@"
    do
        if [ -d "$f" ] && [ "$recursive" = "yes" ] ; then
            if [[ "$f" == */ ]] ; then
                f=${f%/*}
            fi
            process "$f"/*
        elif [ -f "$f" ] ; then
            verify $f
        fi
    done
}

main() {
    check_dependencies

    # parse options {
    positional=()
    while [ $# -gt 0 ]
    do
        case $1 in
            -h | --help )
                showhelp
                exit 0
                ;;
            -r | --recursive )
                recursive="yes"
                ;;
            -v | --version )
                showversion
                exit 0
                ;;
            *)
                positional+=("$1")
                ;;
        esac
        shift
    done
    set -- "${positional[@]}"
    # }

    process "$@"
}

recursive="no"

not_found='NA'
PROGRAM=$(basename $0)
version="0.1.0"

main "$@"
