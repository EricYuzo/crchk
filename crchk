#! /usr/bin/env bash

error() {
    echo "$PROGRAM: $@" 1>&2
    usage
    exit 1
}

check_dependencies() {
    command -v crc32 > /dev/null
    if [ $? -ne 0 ] ; then
        error "program crc32 missing."
    fi
}

usage() {
    echo "Usage: $PROGRAM [OPTION]... FILE..."
    echo "Try '$PROGRAM --help' for more information."
}

showhelp() {
    echo "Usage: $PROGRAM [OPTION]... FILE..."
    echo
    echo "Check FILE integrity based on CRC-32."
    echo
    echo "Available options:"
    echo "  -h, --help    display this help and exit"
}

extract_crc() {
    echo "$1" | grep -q '^.*[[({][0-9A-Fa-f]\{8\}[])}]\(\.[^.]\+\)\?$'
    if [ $? -eq 0 ] ; then
        echo "$1" | tr '[A-F]' '[a-f]' | sed 's/.*[[({]\([0-9a-f]\{8\}\)[])}]\(\.[^.]\+\)\?/\1/'
    else
        echo "$not_found"
    fi
}

compare() {
    crc_name=$1
    crc_calc=$2
    if [ "$crc_name" = "$crc_calc" ] ; then
        echo "ok"
    elif [ "$crc_name" = "$not_found" ] ; then
        echo "$not_found"
    else
        echo "corrupted"
    fi
}

verify() {
    name="$@"
    crc_name=`extract_crc "$name"`
    crc_calc=`crc32 "$name"`
    status=`compare $crc_name $crc_calc`
    echo "$name    $crc_name    $crc_calc    $status"
}

main() {
    check_dependencies

    # parse options {
    positional=()
    while [ $# -gt 0 ]
    do
        case $1 in
            -h | --help )
                showhelp
                exit 0
                ;;
            *)
                positional+=("$1")
                ;;
        esac
        shift
    done
    set -- "${positional[@]}"
    # }


    for f in "$@"
    do
        if [ -f "$f" ] ; then
            verify $f
        fi
    done
}

not_found='NA'
PROGRAM=$(basename $0)

main "$@"
