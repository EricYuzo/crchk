#! /usr/bin/env bash

error() {
    echo "$PROGRAM: $@" 1>&2
    usage
    exit 1
}

check_dependencies() {
    command -v crc32 > /dev/null
    if [ $? -ne 0 ] ; then
        error "program crc32 missing."
    fi
}

usage() {
    echo "Usage: $PROGRAM [OPTION]... FILE..."
    echo "Try '$PROGRAM --help' for more information."
}

showhelp() {
    echo "Usage: $PROGRAM [OPTION]... FILE..."
    echo
    echo "Check FILE integrity based on CRC-32."
    echo "Directories are skipped, by default. You can use -r option to handle directories recursively."
    echo
    echo "Available options:"
    echo "  -g, --generate-sfv    generate SFV file"
    echo "  -h, --help            display this help and exit"
    echo "  -i, --ignore-sfv      ignore SFV files"
    echo "  -r, --recursive       recursively look for files inside directories"
    echo "  -u, --uppercase       display uppercase CRC code"
    echo "  -v, --version         display version information and exit"
}

showversion() {
    echo "$PROGRAM $version"
}

extract_crc() {
    regex='^.*[[({]\([0-9A-Fa-f]\{8\}\)[])}]\(\.[^.]\+\)\?$'
    echo "$1" | grep -q "$regex"
    if [ $? -eq 0 ] ; then
        echo "$1" | tr "$tr_set1" "$tr_set2" | sed "s/${regex}/\1/"
    else
        echo "$not_found"
    fi
}

compare() {
    detected_crc=$1
    calculated_crc=$2
    if [ "$detected_crc" = "$calculated_crc" ] ; then
        echo "ok"
    elif [ "$detected_crc" = "$not_found" ] ; then
        echo "$not_found"
    else
        echo "corrupted"
    fi
}

verify() {
    file_name="$@"
    detected_crc=`extract_crc "$file_name"`
    calculated_crc=`crc32 "$file_name" | tr "$tr_set1" "$tr_set2"`
    status=`compare $detected_crc $calculated_crc`
    echo "$file_name    $detected_crc    $calculated_crc    $status"
    if [ "$generatesfv" = "yes" ] ; then
        sfvdir=`dirname "$file_name"`
        fname=`basename "$file_name"`
        sfvname=`basename "$sfvdir"`.sfv
        echo "$fname $calculated_crc" >> "$sfvdir/$sfvname"
    fi
}

verify_sfv() {
    re='^\(.\+\) \([0-9A-Fa-f]\{8\}\)\s*$'
    echo "$@" | grep -q "$re"
    if [ $? -eq 0 ] ; then # ignore invalid SFV lines
        file_name=`echo "$@" | sed "s/${re}/\1/"`
        detected_crc=`echo "$@" | sed "s/${re}/\2/" | tr "$tr_set1" "$tr_set2"`
        calculated_crc=`crc32 "$file_name" | tr "$tr_set1" "$tr_set2"`
        status=`compare $detected_crc $calculated_crc`
        echo "$file_name    $detected_crc    $calculated_crc    $status"
    fi
}

process() {
    for f in "$@"
    do
        if [ -d "$f" ] && [ "$recursive" = "yes" ] ; then
            if [[ "$f" == */ ]] ; then
                f=${f%/*}
            fi
            if [ "$ignoresfv" = "no" ] && [ -f "$f"/*.sfv ] ; then
                process "$f"/*.sfv
            else
                process "$f"/*
            fi
        elif [ -f "$f" ] ; then
            if [[ "$f" == *.sfv ]] ; then
                if [ "$ignoresfv" = "no" ] ; then
                    read_sfv "$f"
                fi
            else
                verify $f
            fi
        fi
    done
}

read_sfv() {
    OLDIFS=$IFS
    IFS='
'
    base=`dirname "$1"`
    for l in `cat "$1" | grep -v '^\s*;'`
    do
        verify_sfv "$base/$l"
    done
    IFS=$OLDIFS
}

main() {
    check_dependencies

    # parse options {
    positional=()
    while [ $# -gt 0 ]
    do
        case $1 in
            -g | --generate-sfv )
                generatesfv="yes"
                ;;
            -h | --help )
                showhelp
                exit 0
                ;;
            -i | --ignore-sfv )
                ignoresfv="yes"
                ;;
            -r | --recursive )
                recursive="yes"
                ;;
            -u | --uppercase )
                tr_set1='[a-f]'
                tr_set2='[A-F]'
                ;;
            -v | --version )
                showversion
                exit 0
                ;;
            *)
                positional+=("$1")
                ;;
        esac
        shift
    done
    set -- "${positional[@]}"
    # }

    process "$@"
}

generatesfv="no"
ignoresfv="no"
recursive="no"
tr_set1='[A-F]'
tr_set2='[a-f]'

not_found='NA'
PROGRAM=$(basename $0)
version="0.1.0"

main "$@"
